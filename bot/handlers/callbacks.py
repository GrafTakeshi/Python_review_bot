from .base import BaseHandler
from vkteams.types import InlineKeyboardMarkup, KeyboardButton
from database.manager import DatabaseManager
from config import Config
import logging
import json
from datetime import datetime

from ..models.task import Task

logger = logging.getLogger(__name__)


class CallbackHandler(BaseHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-—Å–æ–±—ã—Ç–∏–π –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
    –†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """

    def handle(self, event):
        """
        –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-—Å–æ–±—ã—Ç–∏–π –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –º–µ—Ç–æ–¥–∞–º

        Args:
            event: –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç VK Teams Bot API
        """
        try:
            if not event.data or 'callbackData' not in event.data:
                logger.warning("–ü–æ–ª—É—á–µ–Ω callback –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö")
                return

            callback_data = event.data['callbackData']
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {callback_data}")

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä callback-—Å–æ–±—ã—Ç–∏–π
            if callback_data == "on_review":
                self._start_new_review_process(event)
            elif callback_data == "my_tasks":
                self._show_my_tasks(event)
            elif callback_data == "confirm_task":
                self._confirm_task(event)
            elif callback_data == "cancel_task":
                self._cancel_task(event)
            elif callback_data == "remove_review":
                self._start_remove_process(event)
            elif callback_data == "do_review":
                self._start_review_process(event)
            elif callback_data.startswith("review_task_"):
                self._show_task_for_review(event)
            elif callback_data.startswith("approve_task_"):
                self._approve_task(event)
            elif callback_data.startswith("request_revision_"):
                self._request_revision(event)
            elif callback_data.startswith("confirm_approve_"):
                self._confirm_approve(event)
            elif callback_data.startswith("confirm_revision_"):
                self._confirm_revision(event)
            elif callback_data.startswith("select_task_"):
                self._show_task_for_removal(event)
            elif callback_data.startswith("confirm_remove_"):
                self._confirm_removal(event)
            elif callback_data == "cancel_remove":
                self._cancel_removal(event)
            elif callback_data == "cancel_action":
                self._cancel_action(event)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback_data}")
                self._handle_unknown_callback(event)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {str(e)}", exc_info=True)
            self._send_error_message(event)

    def _handle_unknown_callback(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback-—Å–æ–±—ã—Ç–∏–π"""
        self.bot.bot.send_text(
            chat_id=event.data['message']['chat']['chatId'],
            text="‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
            inline_keyboard_markup=self.keyboards.get_main_keyboard()
        )

    def _send_error_message(self, event):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        self.bot.bot.send_text(
            chat_id=event.data['message']['chat']['chatId'],
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            inline_keyboard_markup=self.keyboards.get_main_keyboard()
        )

    def _start_new_review_process(self, event):
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–µ–≤—å—é
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            event (Event): –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è callback
        """
        try:
            user_id = event.data['from']['userId']
            chat_id = event.data['message']['chat']['chatId']

            logger.info(f"Starting new review process for user {user_id}")

            self.state.set_state(
                user_id=user_id,
                step='youtrack_url',
                data={
                    'chat_id': chat_id,
                    'start_time': datetime.now().isoformat()
                }
            )

            self.bot.bot.send_text(
                chat_id=chat_id,
                text="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É –≤ YouTrack:"
            )

        except Exception as e:
            logger.error(f"Error starting review process: {str(e)}", exc_info=True)
            raise

    def _confirm_task(self, event):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        try:
            user_id = event.data['from']['userId']
            state = self.state.get_state(user_id)

            if not state or 'data' not in state:
                raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = event.data['from']
            creator_name = f"{user_info.get('firstName', '')} {user_info.get('lastName', '')}".strip()
            creator_name = creator_name if creator_name else user_info.get('userId', 'Unknown')

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            task_data = {
                'user_id': user_id,
                'creator': creator_name,
                'description': state['data'].get('description', ''),
                'youtrack_url': state['data'].get('youtrack_url', ''),
                'confluence_url': state['data'].get('confluence_url', ''),
                'status': False,
                'approve_count': 0,
                'approved_by': []
            }

            with DatabaseManager().session() as db:
                # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
                task = self.tasks.create_task(db, task_data)
                db.commit()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                self._notify_task_creation(task, event.data['message']['chat']['chatId'])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                self.bot.bot.send_text(
                    chat_id=state['data']['chat_id'],
                    text=f"‚úÖ –ó–∞–¥–∞—á–∞ #{task.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
                    inline_keyboard_markup=self.keyboards.get_main_keyboard()
                )

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.state.clear_state(user_id)

        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
            self._send_error(event, "–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}", exc_info=True)
            self._send_error(event, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")

    def _notify_task_creation(self, task, chat_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"""
        try:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
            group_message = (
                "üöÄ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ —Ä–µ–≤—å—é!\n\n"
                f"–ê–≤—Ç–æ—Ä: {task.creator}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n"
                f"YouTrack: {task.youtrack_url}\n"
                f"Confluence: {task.confluence_url}"
            )

            self.bot.bot.send_text(
                chat_id=Config.GROUP_CHAT_ID,
                text=group_message
            )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
            self.bot.bot.send_text(
                chat_id=chat_id,
                text=f"–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–µ–≤—å—é (ID: {task.id})"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

    def _send_error(self, event, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        self.bot.bot.send_text(
            chat_id=event.data['message']['chat']['chatId'],
            text=f"‚ùå {message}",
            inline_keyboard_markup=self.keyboards.get_main_keyboard()
        )

    def _format_user_name(self, user_info):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è"""
        first_name = user_info.get('firstName', '').strip()
        last_name = user_info.get('lastName', '').strip()

        if first_name and last_name:
            return f"{first_name} {last_name}"
        elif first_name:
            return first_name
        elif last_name:
            return last_name
        return user_info.get('userId', 'Unknown')

    def _show_task_for_review(self, event):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –¥–ª—è —Ä–µ–≤—å—é

        Args:
            event (Event): –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è callback
        """
        try:
            task_id = int(event.data['callbackData'].split('_')[-1])
            chat_id = event.data['message']['chat']['chatId']
            user_id = event.data['from']['userId']

            logger.info(f"Showing task {task_id} for review by user {user_id}")

            with DatabaseManager().session() as db:
                task = self.tasks.get_task(db, task_id)

                if not task:
                    raise ValueError(f"Task {task_id} not found")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–µ–≤—å—é–∏—Ç —Å–≤–æ—é –∑–∞–¥–∞—á—É
                if task.user_id == user_id:
                    self.bot.bot.send_text(
                        chat_id=chat_id,
                        text="‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–≤—å—é–∏—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏!",
                        inline_keyboard_markup=self.keyboards.get_main_keyboard()
                    )
                    return

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
                if task.status:
                    self.bot.bot.send_text(
                        chat_id=chat_id,
                        text="‚úÖ –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                        inline_keyboard_markup=self.keyboards.get_main_keyboard()
                    )
                    return

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–µ
                approved_by = ", ".join(task.approved_by) if task.approved_by else "–ø–æ–∫–∞ –Ω–µ—Ç"

                response = (
                    "üìù –ó–∞–¥–∞—á–∞ –Ω–∞ —Ä–µ–≤—å—é\n\n"
                    f"ID: #{task.id}\n"
                    f"–ê–≤—Ç–æ—Ä: {task.creator}\n"
                    f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {task.created_at.strftime('%d.%m.%Y')}\n\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{task.description}\n\n"
                    f"–°—Å—ã–ª–∫–∏:\n"
                    f"YouTrack: {task.youtrack_url}\n"
                    f"Confluence: {task.confluence_url}\n\n"
                    f"–û–¥–æ–±—Ä–µ–Ω–∏–π: {task.approve_count}\n"
                    f"–û–¥–æ–±—Ä–∏–ª–∏: {approved_by}"
                )

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
                self.bot.bot.send_text(
                    chat_id=chat_id,
                    text=response,
                    inline_keyboard_markup=self.keyboards.get_task_keyboard(task.id)
                )

        except Exception as e:
            logger.error(f"Error showing task: {str(e)}", exc_info=True)
            self.bot.bot.send_text(
                chat_id=event.data['message']['chat']['chatId'],
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á–∏"
            )

    def _approve_task(self, event):
        """
        –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º

        Args:
            event (Event): –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è callback
        """
        try:
            task_id = int(event.data['callbackData'].split('_')[-1])
            chat_id = event.data['message']['chat']['chatId']

            logger.info(f"Approval requested for task {task_id}")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup()
            keyboard.row(
                KeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ",
                    callbackData=f"confirm_approve_{task_id}",
                    style="primary"
                ),
                KeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callbackData="cancel_action",
                    style="attention"
                )
            )

            self.bot.bot.send_text(
                chat_id=chat_id,
                text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–¥–æ–±—Ä–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?",
                inline_keyboard_markup=keyboard
            )

        except Exception as e:
            logger.error(f"Error initiating approval: {str(e)}", exc_info=True)
            self.bot.bot.send_text(
                chat_id=event.data['message']['chat']['chatId'],
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
            )

    def _confirm_approve(self, event):
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î

        Args:
            event (Event): –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è callback
        """
        try:
            task_id = int(event.data['callbackData'].split('_')[-1])
            user_id = event.data['from']['userId']
            chat_id = event.data['message']['chat']['chatId']

            logger.info(f"Confirming approval for task {task_id} by user {user_id}")

            with DatabaseManager().session() as db:
                task = self.tasks.get_task(db, task_id)

                if not task:
                    raise ValueError(f"Task {task_id} not found")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–¥–æ–±—Ä—è–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if user_id in task.approved_by:
                    self.bot.bot.send_text(
                        chat_id=chat_id,
                        text="‚ÑπÔ∏è –í—ã —É–∂–µ –æ–¥–æ–±—Ä—è–ª–∏ —ç—Ç—É –∑–∞–¥–∞—á—É",
                        inline_keyboard_markup=self.keyboards.get_main_keyboard()
                    )
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–∏–≤—à–∏—Ö
                approved_by = task.approved_by or []
                approved_by.append(user_id)
                task.approved_by = approved_by
                task.approve_count = len(approved_by)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–æ–±—Ä–µ–Ω–∏–π
                if task.approve_count >= 2:  # –ü—Ä–∏–º–µ—Ä: —Ç—Ä–µ–±—É–µ—Ç—Å—è 2 –æ–¥–æ–±—Ä–µ–Ω–∏—è
                    task.status = True
                    task.completed_at = datetime.now()

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
                    approvers = ", ".join(task.approved_by)
                    group_message = (
                        "üéâ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                        f"ID: #{task.id}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n\n"
                        f"–û–¥–æ–±—Ä–∏–ª–∏: {approvers}"
                    )

                    self.bot.bot.send_text(
                        chat_id=Config.GROUP_CHAT_ID,
                        text=group_message
                    )

                db.commit()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                self.bot.bot.send_text(
                    chat_id=chat_id,
                    text="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–∏–ª–∏ –∑–∞–¥–∞—á—É!",
                    inline_keyboard_markup=self.keyboards.get_main_keyboard()
                )

        except Exception as e:
            logger.error(f"Error confirming approval: {str(e)}", exc_info=True)
            self.bot.bot.send_text(
                chat_id=event.data['message']['chat']['chatId'],
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"
            )

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (_request_revision, _start_review_process –∏ —Ç.–¥.)
    # —Ä–µ–∞–ª–∏–∑—É—é—Ç—Å—è –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –≤—ã—à–µ –ø—Ä–∏–º–µ—Ä–∞–º–∏
    # —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Å—Ç–∏–ª—è –∏ –ø–æ–¥—Ö–æ–¥–∞

    def _cancel_task(self, event):
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        user_id = event.data['from']['userId']
        self.state.clear_state(user_id)
        self.bot.bot.send_text(
            chat_id=event.data['message']['chat']['chatId'],
            text="‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            inline_keyboard_markup=self.keyboards.get_main_keyboard()
        )

    def _cancel_action(self, event):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        self.bot.bot.send_text(
            chat_id=event.data['message']['chat']['chatId'],
            text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            inline_keyboard_markup=self.keyboards.get_main_keyboard()
        )

    def _show_my_tasks(self, event):
        try:
            user_id = event.data['from']['userId']
            chat_id = event.data['message']['chat']['chatId']

            with DatabaseManager().session() as db:
                tasks = self.tasks.get_user_tasks(db, user_id)

                if not tasks:
                    self.bot.bot.send_text(
                        chat_id=chat_id,
                        text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ —Ä–µ–≤—å—é",
                        inline_keyboard_markup=self.keyboards.get_main_keyboard()
                    )
                    return

                message = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–µ–≤—å—é:\n\n"
                for task in tasks:
                    message += (
                        f"ID: {task.id}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n"
                        f"–°—Ç–∞—Ç—É—Å: {'–ó–∞–≤–µ—Ä—à–µ–Ω–∞' if task.status else '–ù–∞ —Ä–µ–≤—å—é'}\n"
                        f"–û–¥–æ–±—Ä–µ–Ω–∏–π: {task.approve_count}\n\n"
                    )

                self.bot.bot.send_text(
                    chat_id=chat_id,
                    text=message,
                    inline_keyboard_markup=self.keyboards.get_main_keyboard()
                )

        except Exception as e:
            logger.error(f"Error showing tasks: {str(e)}", exc_info=True)
            self.bot.bot.send_text(
                chat_id=event.data['message']['chat']['chatId'],
                text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"
            )

    def _start_review_process(self, event):
        try:
            user_id = event.data['from']['userId']
            chat_id = event.data['message']['chat']['chatId']

            with DatabaseManager().session() as db:
                tasks = self.tasks.get_reviewable_tasks(db, user_id)

                if not tasks:
                    self.bot.bot.send_text(
                        chat_id=chat_id,
                        text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–≤—å—é",
                        inline_keyboard_markup=self.keyboards.get_main_keyboard()
                    )
                    return

                keyboard = InlineKeyboardMarkup(buttons_in_row=1)
                for task in tasks:
                    keyboard.row(
                        KeyboardButton(
                            text=f"–ó–∞–¥–∞—á–∞ #{task.id}: {task.description[:30]}...",
                            callbackData=f"review_task_{task.id}"
                        )
                    )

                self.bot.bot.send_text(
                    chat_id=chat_id,
                    text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–≤—å—é:",
                    inline_keyboard_markup=keyboard
                )

        except Exception as e:
            logger.error(f"Error starting review: {str(e)}", exc_info=True)
            self.bot.bot.send_text(
                chat_id=event.data['message']['chat']['chatId'],
                text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"
            )

    def _start_remove_process(self, event):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–Ω—è—Ç–∏—è –∑–∞–¥–∞—á–∏ —Å —Ä–µ–≤—å—é"""
        try:
            user_id = event.data['from']['userId']
            chat_id = event.data['message']['chat']['chatId']

            with DatabaseManager().session() as db:
                tasks = self.tasks.get_user_tasks(db, user_id)

                if not tasks:
                    self.bot.bot.send_text(
                        chat_id=chat_id,
                        text="–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Å–Ω—è—Ç–∏—è —Å —Ä–µ–≤—å—é",
                        inline_keyboard_markup=self.keyboards.get_main_keyboard()
                    )
                    return

                keyboard = InlineKeyboardMarkup(buttons_in_row=1)
                for task in tasks:
                    keyboard.row(
                        KeyboardButton(
                            text=f"–ó–∞–¥–∞—á–∞ #{task.id}: {task.description[:30]}...",
                            callbackData=f"select_task_{task.id}"
                        )
                    )

                self.bot.bot.send_text(
                    chat_id=chat_id,
                    text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Å–Ω—è—Ç–∏—è —Å —Ä–µ–≤—å—é:",
                    inline_keyboard_markup=keyboard
                )

        except Exception as e:
            logger.error(f"Error starting remove process: {str(e)}", exc_info=True)
            self.bot.bot.send_text(
                chat_id=event.data['message']['chat']['chatId'],
                text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"
            )

    def _start_remove_process(self, event):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–Ω—è—Ç–∏—è –∑–∞–¥–∞—á–∏ —Å —Ä–µ–≤—å—é"""
        try:
            user_id = event.data['from']['userId']
            chat_id = event.data['message']['chat']['chatId']

            with DatabaseManager().session() as db:
                tasks = db.query(Task).filter(
                    Task.user_id == user_id,
                    Task.status == False
                ).all()

                if not tasks:
                    self.bot.bot.send_text(
                        chat_id=chat_id,
                        text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Å–Ω—è—Ç–∏—è",
                        inline_keyboard_markup=self.keyboards.get_main_keyboard()
                    )
                    return

                keyboard = InlineKeyboardMarkup(buttons_in_row=1)
                for task in tasks:
                    keyboard.row(
                        KeyboardButton(
                            text=f"–ó–∞–¥–∞—á–∞ #{task.id}: {task.description[:30]}...",
                            callbackData=f"select_task_{task.id}"
                        )
                    )

                self.bot.bot.send_text(
                    chat_id=chat_id,
                    text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Å–Ω—è—Ç–∏—è —Å —Ä–µ–≤—å—é:",
                    inline_keyboard_markup=keyboard
                )

        except Exception as e:
            logger.error(f"Error starting remove process: {str(e)}", exc_info=True)
            self.bot.bot.send_text(
                chat_id=event.data['message']['chat']['chatId'],
                text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"
            )

    def _show_task_for_removal(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–Ω—è—Ç–∏—è"""
        try:
            task_id = int(event.data['callbackData'].split('_')[-1])
            chat_id = event.data['message']['chat']['chatId']
            user_id = event.data['from']['userId']

            with DatabaseManager().session() as db:
                task = db.query(Task).filter(
                    Task.id == task_id,
                    Task.user_id == user_id
                ).first()

                if not task:
                    raise ValueError("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º")

                response = (
                    "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É —Å —Ä–µ–≤—å—é?\n\n"
                    f"ID: {task.id}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n"
                    f"–°—Ç–∞—Ç—É—Å: {'–ó–∞–≤–µ—Ä—à–µ–Ω–∞' if task.status else '–ù–∞ —Ä–µ–≤—å—é'}\n"
                    f"–û–¥–æ–±—Ä–µ–Ω–∏–π: {task.approve_count}"
                )

                keyboard = InlineKeyboardMarkup()
                keyboard.row(
                    KeyboardButton(
                        text="‚úÖ –î–∞, —Å–Ω—è—Ç—å",
                        callbackData=f"confirm_remove_{task.id}",
                        style="primary"
                    ),
                    KeyboardButton(
                        text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å",
                        callbackData="cancel_remove",
                        style="attention"
                    )
                )

                self.bot.bot.send_text(
                    chat_id=chat_id,
                    text=response,
                    inline_keyboard_markup=keyboard
                )

        except ValueError as e:
            logger.error(f"Invalid task ID: {str(e)}")
            self.bot.bot.send_text(
                chat_id=event.data['message']['chat']['chatId'],
                text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–¥–∞—á–∏"
            )
        except Exception as e:
            logger.error(f"Error showing task for removal: {str(e)}", exc_info=True)
            self.bot.bot.send_text(
                chat_id=event.data['message']['chat']['chatId'],
                text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á–∏"
            )

    def _confirm_removal(self, event):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–Ω—è—Ç–∏–µ –∑–∞–¥–∞—á–∏ —Å —Ä–µ–≤—å—é"""
        try:
            task_id = int(event.data['callbackData'].split('_')[-1])
            chat_id = event.data['message']['chat']['chatId']
            user_id = event.data['from']['userId']

            with DatabaseManager().session() as db:
                task = db.query(Task).filter(
                    Task.id == task_id,
                    Task.user_id == user_id
                ).first()

                if task:
                    db.delete(task)
                    db.commit()

                    self.bot.bot.send_text(
                        chat_id=chat_id,
                        text="‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–∞ —Å —Ä–µ–≤—å—é!",
                        inline_keyboard_markup=self.keyboards.get_main_keyboard()
                    )
                else:
                    raise ValueError("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        except Exception as e:
            logger.error(f"Error confirming removal: {str(e)}", exc_info=True)
            self.bot.bot.send_text(
                chat_id=event.data['message']['chat']['chatId'],
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –∑–∞–¥–∞—á–∏"
            )

    def _cancel_removal(self, event):
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–Ω—è—Ç–∏—è –∑–∞–¥–∞—á–∏"""
        self.bot.bot.send_text(
            chat_id=event.data['message']['chat']['chatId'],
            text="‚ùå –°–Ω—è—Ç–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            inline_keyboard_markup=self.keyboards.get_main_keyboard()
        )